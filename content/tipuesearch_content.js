var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite  \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': '任務一', 'text': '環境:NX \n 進度:組裝完成 能放在模擬\xa0 \n 雲端: \n 檔案上天了(GoogleDrive) \n 尺寸 \n 柱( 載點 ) \n \n 底座 ( 載點 ) \n \n \n 球 (載點) \n \n \n 軌道 (載點) \n \n 漏斗( 載點 ) \n \n \n \n \n 組裝過程 \n 組裝過程(縮時) \n \n \n \n 模擬 \n 機電模擬檔 \n', 'tags': '', 'url': '任務一.html'}, {'title': 'w5', 'text': '\n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '\n', 'tags': '', 'url': 'w6.html'}, {'title': 'w13-w14', 'text': '2a座位 \n \n \n \n \n \n \n \n \n 第一排: \n \n 座位號 (1,1), 學號: 41123123 \n 座位號 (1,2), 學號: 41123119 \n 座位號 (1,3), 學號: 41123105 \n 座位號 (1,4), 學號: 41123152 \n 座位號 (1,5), 學號: 41123120 \n 座位號 (1,6), 學號: 41123108 \n 座位號 (1,7), 學號: 41123145 \n 座位號 (1,8), 學號: 41123137 \n 座位號 (1,9), 學號: 41123130 \n \n 第二排: \n \n 座位號 (2,1), 學號: 41123140 \n 座位號 (2,2), 學號: 41123150 \n 座位號 (2,3), 學號: 41123124 \n 空位 \n 座位號 (2,5), 學號: 41136123 \n 座位號 (2,6), 學號: 41123148 \n 座位號 (2,7), 學號: 41123116 \n 座位號 (2,8), 學號: 41123146 \n 空位 \n \n 第三排: \n \n 座位號 (3,1), 學號: 41123139 \n 座位號 (3,2), 學號: 41123131 \n 座位號 (3,3), 學號: 41123135 \n 座位號 (3,4), 學號: 41123149 \n 座位號 (3,5), 學號: 41123122 \n 座位號 (3,6), 學號: 41123134 \n 座位號 (3,7), 學號: 41123107 \n 座位號 (3,8), 學號: 41123101 \n 座位號 (3,9), 學號: 41123102 \n \n 第四排: \n \n 座位號 (4,1), 學號: 41123128 \n 座位號 (4,2), 學號: 41123117 \n 座位號 (4,3), 學號: 41123114 \n 座位號 (4,4), 學號: 41123126 \n 座位號 (4,5), 學號: 41123115 \n 座位號 (4,6), 學號: 41123111 \n 空位 \n 座位號 (4,8), 學號: 41123112 \n 空位 \n \n 第五排: \n \n 座位號 (5,1), 學號: 41123144 \n 座位號 (5,2), 學號: 41123141 \n 座位號 (5,3), 學號: 41123143 \n 座位號 (5,4), 學號: 41123129 \n 空位 \n 空位 \n 座位號 (5,7), 學號: 41023134 \n 座位號 (5,8), 學號: 41023156 \n 座位號 (5,9), 學號: 41023155 \n \n 第六排: \n \n 座位號 (6,1), \n 座位號 (6,2), 學號: 41123154\xa0 \n 座位號 (6,3), 學號: 41123153\xa0 \n 空位\xa0 \n 座位號 (6,5), 學號: 41023245 \n 座位號 (6,6), 學號: 41023246 \n 空位 \n 座位號 (6,8), 學號: 40923127 \n 座位號 (6,9), 學號: 40923213 \n \n \n \n \n \n \n \n \n \n class Seat:\n    def __init__(self, row, col, student_id):\n        self.row = row\n        self.col = col\n        self.student_id = student_id\n\ndef parse_seat_info(seat_info):\n    seat_info = seat_info.split(\',\')\n    row = int(seat_info[0][1])\n    col = int(seat_info[1][0])\n    student_id = seat_info[2].strip()\n    return Seat(row, col, student_id)\n\ndef print_seating_arrangement(seating_arrangement):\n    for row in seating_arrangement:\n        row_str = \'\'\n        for seat in row:\n            if seat:\n                row_str += f"{seat.row},{seat.col} {seat.student_id} | "\n            else:\n                row_str += "空位 | "\n        print(row_str.rstrip(" | "))\n\ndef main():\n    seat_info_list = [\n        "(1,1), 學號: 41123123", "(1,2), 學號: 41123119", "(1,3), 學號: 41123105", "(1,4), 學號: 41123152",\n        "(1,5), 學號: 41123120", "(1,6), 學號: 41123108", "(1,7), 學號: 41123145", "(1,8), 學號: 41123137",\n        "(1,9), 學號: 41123130", "(2,1), 學號: 41123140", "(2,2), 學號: 41123150", "(2,3), 學號: 41123124",\n        "空位", "(2,5), 學號: 41136123", "(2,6), 學號: 41123148", "(2,7), 學號: 41123116", "(2,8), 學號: 41123146",\n        "空位", "(3,1), 學號: 41123139", "(3,2), 學號: 41123131", "(3,3), 學號: 41123135", "(3,4), 學號: 41123149",\n        "(3,5), 學號: 41123122", "(3,6), 學號: 41123134", "(3,7), 學號: 41123107", "(3,8), 學號: 41123101",\n        "(3,9), 學號: 41123102", "(4,1), 學號: 41123128", "(4,2), 學號: 41123117", "(4,3), 學號: 41123114",\n        "(4,4), 學號: 41123126", "(4,5), 學號: 41123115", "(4,6), 學號: 41123111", "空位", "(4,8), 學號: 41123112",\n        "空位", "(5,1), 學號: 41123144", "(5,2), 學號: 41123141", "(5,3), 學號: 41123143", "(5,4), 學號: 41123129",\n        "空位", "空位", "(5,7), 學號: 41023134", "(5,8), 學號: 41023156", "(5,9), 學號: 41023155", "(6,1), 學號: 40923118",\n        "(6,2), 學號: 41123154", "(6,3), 學號: 41123153", "空位", "(6,5), 學號: 41023245", "(6,6), 學號: 41023246",\n        "空位", "(6,8), 學號: 40923127", "(6,9), 學號: 40923213"\n    ]\n\n    max_row = 6\n    max_col = 9\n\n    seating_arrangement = [[None for _ in range(max_col)] for _ in range(max_row)]\n\n    for seat_info in seat_info_list:\n        if "空位" in seat_info:\n            continue\n        seat = parse_seat_info(seat_info)\n        seating_arrangement[seat.row - 1][seat.col - 1] = seat\n\n    print_seating_arrangement(seating_arrangement)\n\nif __name__ == "__main__":\n    main()\n \n', 'tags': '', 'url': 'w13-w14.html'}, {'title': 'w15', 'text': '雲端 \n 機電模擬檔(.ttt) \n 零件檔1(.stl) \n 零件檔2(.stl) \n 零件檔3(.stl) \n -1 \n \n -2 \n \n 實際去操作後，才發現並沒有想像中的好用，所以這是我的一次嘗試，當中我也有使用chatgpt 詢問該如何做，結果也不是很理想 \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': '課程總結', 'text': '\n A: 是否按照進度明確標示倉儲的改版歷程?  不完全按照 在後面幾週改正 \n B: 是否根據 \xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論?\xa0 \xa0是 \n C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作?  是 \n D: 是否就所分配的 \xa0 CAD 套件 從安裝設定到繪圖提供內容參考?  是， 傳送門在這 \n E: 是否使用所分配的 CAD 套件完成 專案一零組件繪圖 , 並提供零組件下載? \xa0 檔案(GoogleDrive) \n F: 是否將自行繪製的專案一零組件 轉入 CoppeliaSim?  是 \n G: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案一轉入的零組件設定感測器, 並進行 鋼球永動模擬? 尚未 \n H: 是否實際操作 \xa0 Triangle 軌道系統 的鋼球永動模擬?  尚未 \n I: 是否完成 W15 的平面雙 U 迴路上的 鋼球永動系統繪圖、轉檔與系統模擬?  是， 傳送門在這裡 \n J: 是否使用所分配的 CAD 套件完成 專案二 1D 平台零組件繪圖 , 並提供零組件下載?  是， 檔案雲端 \n K: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬?  \xa0 已使用，但不成功 實際操作畫面之2 \n L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 \xa0 PID 控制理論 進行資料收集與 ChatGPT 對答?\xa0 \n 在一維（1D）平台上的鋼球平衡系統中，PID（比例-積分-微分）控制器通常被用來維持鋼球在平台上的平衡。以下是一些可能有助於進行 PID 控制理論的資料收集的步驟： \n \n \n 系統特性分析： \n \n 測量平台的物理特性，例如質量、摩擦係數等。 \n 測量鋼球的質量、半徑等相關參數。 \n 確定平台的尺寸和形狀。 \n \n \n \n 感測器資料收集： \n \n 安裝適當的感測器（例如陀螺儀、加速度計）以測量平台的傾斜角度。 \n 收集感測器數據，以了解平台傾斜的實際情況。 \n \n \n \n 控制器參數調整： \n \n 基於初步模擬或實驗數據，設計一個簡單的比例控制器（P控制）。 \n 進行一系列實驗，調整比例增益，以找到使系統穩定的值。 \n \n \n \n 積分和微分參數調整： \n \n 添加積分控制（I控制）並調整相應的積分增益。 \n 添加微分控制（D控制）並調整相應的微分增益。 \n 這些步驟有助於改進系統的響應速度和穩定性。 \n \n \n \n 系統響應分析： \n \n 進行步階響應實驗，觀察系統的響應特性。 \n 分析響應曲線，例如超調量、穩態誤差等。 \n \n \n \n 抗擾動能力測試： \n \n 引入擾動（例如外力或隨機干擾），觀察系統對擾動的響應。 \n 調整控制器參數，使系統更具有抗擾動能力。 \n \n \n \n 模擬和實驗驗證： \n \n 使用模擬工具進行進一步的控制器性能分析。 \n 在實驗中驗證模擬結果，進一步調整控制器參數。 \n \n \n \n 性能優化： \n \n 通過反覆調整PID參數，使系統達到最佳性能。 \n 考慮使用高級控制策略，如模型預測控制（MPC）等，以進一步優化性能。 \n \n \n \n 以上步驟應該在理論和實驗的基礎上進行，以確保控制器能夠有效地維持鋼球在1D平台上的平衡。 \n \n', 'tags': '', 'url': '課程總結.html'}]};